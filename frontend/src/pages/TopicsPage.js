import React from 'react';
function TopicsPage() {
    return (
        <>
            <h2>Web Dev Concepts</h2>
                <nav class="local">
                    <a href="#servers">Web Servers</a>
                    <a href="#design">Frontend Design</a>
                    <a href="#images">Optimizing Images</a>
                    <a href="#favicons">Favicons</a>
                    <a href="#css">Cascading Style Sheets</a>
                    <a href="#forms">Forms</a>
                    <a href="#express">Express</a>
                </nav>
                <article id="servers">
                    <h3>Web Servers</h3>
                    <p><strong>Index</strong> is the name of a file that is stored in the root directory of a website’s domain. It is commonly known as the <strong>designated homepage</strong>. When a <strong>web server</strong> receives a GET request for /, it will usually return the file located at the path /index.html. In other words, if a user enters a <strong>URL</strong> that does not specify a file name, the server will return the homepage (in this case, index.html) by default. In some cases, the server may return index.js or index.php as the homepage instead.</p>
                    <p>The browser’s Web Dev/Inspector Network tab output screen shows information about a file’s request URL, request method, <strong>status code</strong>, <strong>IP address</strong>, and referrer policy. The response and request headers contain information about the file’s age, cache details, and the date on which it was last modified, as well as information about the language, server, and current date. When viewing the information about the file from the web server versus the local computer, the web server’s version is much more detailed. Both versions contain information about the URL, method, status code, last-modified date, and content type. However, the server’s version includes details about the IP address, cache details, current date, language, and server, while the local version does not.</p>
                    <p>A status code of 200 indicates that the server was able to successfully find and return the requested file. The favicon.ico file has a status of 200 because OSU’s server provides the favorites icon by default. In contrast, the main.css and main.js files have not been created yet. This means that they have a status code of 404, indicating that the server cannot find the requested file (in this case, because the files do not exist).</p>
                    <p>The full URL to this web file is https://web.engr.oregonstate.edu/~kissv. The first part of this URL is the <strong>scheme</strong>, which specifies the protocol the web client employs to communicate with the server. This web file’s scheme is https://, which is a protocol that enables the client and server to request and send encrypted information. The next part of this URL is the <strong>subdomain</strong>, which is a specific part of the server. This file’s subdomain is web.engr. The subdomain is followed by the <strong>host domain</strong>, which is the name of the server on which the file is stored. This file’s host domain is oregonstate.edu. The final part of this URL is the <strong>resource</strong>. The resource is the specific webpage on the server that we are trying to access. In this case, the resource is /~kissv.</p>
                </article>
                <article id="design">
                    <h3>Frontend Design</h3>
                    <p><strong>Frontend design</strong> is the combination of visual design, <strong>graphical user-interface (GUI)</strong>, and features allowing user interactivity when creating web applications. Good visual design ensures that a webpage’s colors, font, typography, photography, icons, illustrations, and navigation system adhere to a consistent and cohesive scheme. Frontend design focuses on creating web applications that are easy and engaging to use.</p>
                    <h4>The 5 "E"s of Usability:</h4>
                    <dl>
                        <dt><strong>Effective</strong></dt>
                        <dd>The website allows users to achieve their goals and delivers accurate outcomes.</dd>
                        <dt><strong>Efficient</strong></dt>
                        <dd>The website minimizes the number of steps needed for the user to achieve their goals.</dd>
                        <dt><strong>Easy to navigate</strong></dt>
                        <dd>Users can easily find the information or tools they are looking for, even if it is their first time using 
                            the website. If they are revisiting the website, they can remember how to find what they are looking for 
                            without difficulty.</dd>
                        <dt><strong>Error-free</strong></dt>
                        <dd>The website functions smoothly without issues that hamper users' experience.</dd>
                        <dt><strong>Enjoyable to use</strong></dt>
                        <dd>The website's content and design appropriately fulfill the needs of its intended users.</dd>
                    </dl>
                    <p>The <strong>&lt;header&gt;</strong> element contains the website’s name, publisher, and slogan. It remains consistent across
                         all pages to indicate to users that they are part of the same website. The <strong>&lt;nav&gt;</strong> element holds navigation 
                         links that direct users to other pages on the same website. The website’s main menu, tools, locations, and legal links are 
                         commonly included in &lt;nav&gt; elements. The <strong>&lt;main&gt;</strong> element is the chief content-containing block on the page. It 
                         may include tutorials, stories, photo galleries, or other types of content. The <strong>&lt;section&gt;</strong> element groups thematically-related 
                         content. The first child element is usually a headline of size &lt;h1&gt; that provides an overview of the section’s content. 
                         The <strong>&lt;article&gt;</strong> element is usually contained within a &lt;section&gt; element. It represents a single topic and has a headline of 
                         size &lt;h2&gt;. The <strong>&lt;aside&gt;</strong> element typically contains content that is associated with an article. It usually has its 
                         own unique style and floats to the left or right of the article. It is sometimes used to implement a navigation sidebar. The <strong>&gt;figure&lt;</strong> 
                         element usually contains media, such as images or movies, that are related to the article. Inserting a <strong>&lt;figcaption&gt;</strong> element inside
                          a figure element creates a caption for that element. The <strong>&lt;blockquote&gt;</strong> element is used for long quotations that are too 
                          lengthy to be included in a paragraph. Blockquote elements are visually distinct from paragraphs and can include citations as well as quotations. 
                          The <strong>&gt;footer&lt;</strong> element contains information that typically goes at the bottom of a webpage, including links, legal information, 
                          and contact information. It almost always includes the copyright statement of the website owner. The <strong>&lt;div&gt;</strong> element is a 
                          generic container for content with no style or measurements. It can be used to partition content if no other elements are suitable or 
                          to act as a placeholder for dynamic content.</p>
                    <h4>Using anchors to link to content:</h4>
                    <ol>
                        <li><strong>External content:</strong> To link to external content, the <strong>href</strong> attribute of the anchor is assigned to the URL of an external website.</li>
                        <li><strong>Internal content:</strong> To link to internal content, the anchor’s href attribute is assigned to the ID of some content (for example, an article) within the same page.</li>
                        <li><strong>Page-to-page:</strong> To link from page-to-page, an anchor’s href attribute can be assigned to the file name of the desired page. For example, to link to a website’s homepage, 
                                    the href attribute could be assigned to index.html. Multiple such anchors can be included in a page’s navigation block to link to different pages on the website.</li>
                    </ol>
                </article>
                <article id="images">
                    <h3>Optimizing Images</h3>
                    <p>One of the major specification of images for the web is a <strong>descriptive file name</strong>. Including details about who, what, where, and when in the image file name allows for better search engine optimization (SEO), which makes it more likely to turn up in search results when users look for similar images. Another specification is <strong>small file size</strong>. Compressing files permits a faster load time across all devices. Using <strong>exact dimensions</strong> guarantees that images will automatically fit within the dimensions of the web page. This can be achieved by cropping or reducing the image’s size if it’s too big for the page. <strong>Correct file format</strong> is also important because it ensures that the image will have the appropriate quality and load time. <strong>Reduced resolution</strong> ensures that an image will load quickly on a website while still appearing high-quality. Images are typically rendered between 72 or 300+ pixels per inch on monitors. Finally, it is important to choose the correct <strong>color mode</strong> for the file type. For example, RGB color mode is used for PNG, JPG, SVG, and WebP files, and Indexed color mode is used for GIF files.</p>
                    <p><strong>JPG</strong> files and <strong>WebP</strong> files are the best file format for photos because they can be compressed to a small size without losing their rectangular shape. However, higher compression does result in a reduction in image quality. WebP files can be used to create transparent backgrounds. <strong>SVG</strong>, <strong>GIF</strong>, and <strong>PNG</strong> files are the best format for line art. SVG files are math-based and can handle 2D, interactive, and animated images. GIF files can accommodate animation and 8-bit transparency and have an antialiasing property for edges. PNG files have true transparency and are best for dealing with abstract shapes and solid colors. When placed over any color, they will not cause distortion.</p>
                </article>
                <article id="favicons">
                    <h3>Favicons</h3>
                    <p>A <strong>favicon</strong> is a visual symbol that acts as a website, app, or company’s logo. It is typically saved in a variety of file formats in order to accommodate multiple different devices and browsers. It usually appears in browser tabs, on device screens, and in search engine results so that the site can be easily identified. Favicons can be saved by browsers and anchored to a favorites lists, bookmark, search engine results list, or device screen</p>
                </article>
                <article id="css">
                    <h3>Cascading Style Sheets</h3>
                    <p><strong>Cascading Style Sheets (CSS) </strong> are an essential component of a website’s visual design. CSS redefines the basic structure and organization laid out by HTML in order to enhance users’ experience, make content more readable, and incorporate branding. Using CSS, web developers can change a website’s color scheme and font, carefully control the <strong>margin</strong>, <strong>padding</strong>, and dimensions of each element on a page, and change the visual layout of the website’s elements by using <strong>block</strong>, <strong>flex</strong>, and <strong>grid</strong> properties.</p>
                    <p>There are five different ways to incorporate CSS styles. The first and most common way is to through <strong>externally linked CSS files</strong>. This is achieved by linking a stylesheet file in the head of an HTML file. Styles can also be <strong>embedded </strong> inside a style tag placed in the area one wishes to style. Styles may be included <strong>inline</strong> by including an attribute and value within an element as well. <strong>JavaScript template literals</strong> allow styles to be included within a JavaScript function by defining a variable with an attribute and value.  Finally, styles can be incorporated using JavaScript’s <strong>Document Object Model (DOM)</strong>, which selects specific elements and updates their styles.</p>
                </article>
                <article id="forms">
                    <h3>Forms</h3>
                    <p>There are six major goals of accessible forms. The first is to <strong>give users clear instructions</strong> above the form and in its labels. This ensures that users understand the information they need to include in order to fill out the form properly. Another goal is to <strong>let users know the purpose of the data collection</strong> and <strong>specify required fields</strong>. Users are more likely to complete the form if they understand what information they are obligated to supply and for what purpose. Additionally, developers should <strong>set the first field to autofocus</strong>. This makes it easier for users to type because they don’t have to locate the first field with their mouse and cursor. To increase accessibility, <strong>all form controls should be able to be completed using only a keyboard</strong>. This accommodates users who don’t have or can’t use a trackpad or mouse. Developers can also clarify the order in which fields must be completed by <strong>adding tab indexing to complex forms</strong>. Finally, accessible form design <strong>makes validation messages screen readable</strong> in order to accommodate visually impaired users.</p>
                    <p>There are several major tags associated with forms. The first is the <strong>&lt;form&gt;</strong> tag. One of its most important attributes is the <strong>action</strong> attribute, which designates where the form’s request should be sent in the form of a relative path or absolute URL. Additionally, when the form is submitted, the <strong>method</strong> attribute designates the HTTP method used in the HTTP request. Its typical values are <strong>GET</strong> or <strong>POST</strong>. The <strong>&lt;fieldset&gt;</strong> and <strong>&lt;legend&gt;</strong> tags logically group and separate different components of the form. The &lt;form&gt; tag typically contains information to help the user understand the function of the group. The <strong>&lt;label&gt;</strong> tag helps users understand the purpose of each field in the form. It includes a <strong>for</strong> attribute that is identical to the form control’s <strong>id</strong> attribute. The <strong>&lt;input&gt;</strong> tag designates a field where users can provide requested data. The &lt;input&gt; tag’s <strong>type</strong> attribute influences how the input field is displayed and used. Some of the common values include <strong>email</strong>, <strong>checkbox</strong>, and <strong>radio</strong>. The <strong>name</strong> attribute tells the server which part of the form the data is sourced from, and the <strong>required</strong> attribute indicates the fields the user is required to complete. The <strong>&lt;select&gt;</strong> tag defines a drop-down menu of choices and has a name attribute. It is used in conjunction with the <strong>&lt;option&gt;</strong> tag, which defines the choices in the menu. The <strong>&lt;textarea&gt;</strong> tag defines an input field in which users can leave a multiple line message. Some common attributes include name and id. Finally, the <strong>&lt;button&gt;</strong> tag completes the action indicated by the form tag when clicked, activated by a keystroke, or touched. It is typically used to submit the data collected from the user.</p>
                    <p>There are many form style recommendations to improve usability. For example, the dimensions of a form’s input fields should be able to accommodate a cellphone user’s fingertip. Visually separating groups of labels and inputs minimizes confusion. Using the <strong>display</strong> property on labels causes them to appear above the form controls, increasing clarity. Additionally, <strong>autofocus</strong> positions the cursor in the form’s first field, allowing the user to begin typing instantly. <strong>Color changes</strong> can help indicate that the user may start typing and also clarify whether a user’s input is valid or invalid. Asterisks, color-coding, and other forms of styling can be used to highlight a field’s <strong>required status</strong>, which helps users differentiate between mandatory and optional fields. Changing the appearance of a checked box or radio button clarifies whether the user has selected or deselected it. Attributes such as <strong>:disabled</strong> and <strong>:enabled</strong> prevent users from accessing parts of a form until the required input is provided.</p>
                </article>
                <article id="express">
                    <h3>Express</h3>
                    <p>Many technologies can be used to enhance the web development experience. <strong>Node.js</strong> is an open source, cross-platform, JavaScript-based runtime environment. It is useful in web development because it facilitates the creation of networking and server-side applications. Another helpful technology is <strong>npm</strong>, which is a package manager for Node. Developers can avoid the hassle of writing their programs completely from scratch by finding open source packages in npm’s <strong>online repository</strong>. These packages can then be easily installed using the <strong>command line</strong>. Finally, <strong>Express.js</strong> is a framework that aids in the creation of web applications by providing <strong>Application Programming Interfaces (APIs)</strong>. APIs are a set of protocols that allow applications to communicate and interact with each other. Express gives developers the ability to get, post, and delete data. It also allows them to specify ports and routes for data. Additionally, Express can pull data from <strong>static files</strong> in a public folder and use it to dynamically build a customized response.</p>
                </article>
        </>
    );
}

export default TopicsPage;
            